#include "Plans/GameStrategy/Gameplay/DefendPlay1457173681216.h"
using namespace alica;
/*PROTECTED REGION ID(eph1457173681216) ENABLED START*/ //Add additional using directives here
#include "PriorityList.h"
#include "DistBallRobot.h"
#include "engine/model/Plan.h"
/*PROTECTED REGION END*/
namespace alicaAutogenerated
{
    //Plan:DefendPlay

    //Check of RuntimeCondition - (Name): NewRuntimeCondition, (ConditionString): , (Comment) :

    /*
     * Available Vars:
     */
    bool RunTimeCondition1457173948942::evaluate(shared_ptr<RunningPlan> rp)
    {
        /*PROTECTED REGION ID(1457173948942) ENABLED START*/
        return true;
        /*PROTECTED REGION END*/
    }

    /* generated comment

     Task: Attack  -> EntryPoint-ID: 1457173750608

     Task: Block  -> EntryPoint-ID: 1457173768386

     Task: Defend  -> EntryPoint-ID: 1457173771067

     */
    shared_ptr<UtilityFunction> UtilityFunction1457173681216::getUtilityFunction(Plan* plan)
    {
        /*PROTECTED REGION ID(1457173681216) ENABLED START*/

        vector<long> entryPointsPr;
        entryPointsPr.push_back(1457173750608); // attacker
        entryPointsPr.push_back(1457173768386); // blocker
        entryPointsPr.push_back(1457173771067); // defender
        PriorityList* us = new PriorityList(0.15, "OtherPlan", 2, entryPointsPr);

        vector<long> entryPointsAt;
        entryPointsAt.push_back(1457173750608); // attacker
        msl::DistBallRobot* dbr = new msl::DistBallRobot(2.5, "DistBallRobot", 1, entryPointsAt);

        list<USummand*> utilSummands;
        utilSummands.push_back(dbr);
        utilSummands.push_back(us);
        shared_ptr < UtilityFunction > function = make_shared < UtilityFunction
                > ("PrioAndDBR", utilSummands, 0.01, 0.0, plan);
        return function;

        /*PROTECTED REGION END*/
    }

//State: Attack in Plan: DefendPlay

//State: Block in Plan: DefendPlay

//State: Defend in Plan: DefendPlay

}
